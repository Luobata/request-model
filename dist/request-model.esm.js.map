{"version":3,"file":"request-model.esm.js","sources":["../src/lib/conf.ts","../src/lib/help.ts","../src/request/data.ts","../src/request/chain.ts","../src/request/request.ts"],"sourcesContent":["/**\r\n * @desciption conf\r\n */\r\n\r\nexport const commitToken: symbol | string = ((): symbol | string => {\r\n    const key: string = '__REQUEST__MODEL__COMMIT__TOKEN';\r\n    if (Symbol) {\r\n        return Symbol(key);\r\n    } else {\r\n        return key;\r\n    }\r\n})();\r\n","/**\r\n * @description help\r\n */\r\n\r\n// tslint:disable no-any no-unsafe-any\r\n\r\nexport const isArray: Function = (obj: any): boolean => {\r\n    return Object.prototype.toString.call(obj) === '[object Array]';\r\n};\r\n\r\nexport const isObject: Function = (obj: any): boolean => {\r\n    return Object.prototype.toString.call(obj) === '[object Object]';\r\n};\r\nexport const isFunction: Function = (obj: any): obj is Function => {\r\n    return Function.prototype.toString.call(obj) === '[object Function]';\r\n};\r\n\r\nexport const isPromise: Function = (obj: any): boolean => {\r\n    try {\r\n        return typeof obj.then === 'function';\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n};\r\n","/**\r\n * @description help to find data in Request\r\n */\r\nimport Request, { IRequest } from 'Request/request';\r\n\r\ntype Iresult = Function | undefined;\r\n\r\nexport const getFunctionInRequest: Function = (\r\n    key: string,\r\n    request: Request,\r\n): Iresult => {\r\n    let iRequest: IRequest | Function = request.request;\r\n    if (key.indexOf('/') !== -1) {\r\n        const keys: string[] = key.split('/');\r\n        keys.map((v: string): void => {\r\n            if (!(iRequest instanceof Function)) {\r\n                iRequest = iRequest[v];\r\n            }\r\n        });\r\n    } else {\r\n        iRequest = iRequest[key];\r\n    }\r\n    if (iRequest instanceof Function) {\r\n        return iRequest;\r\n    }\r\n};\r\n","/**\r\n * @description chain\r\n */\r\nimport { commitToken } from 'Lib/conf';\r\nimport { isArray, isObject, isPromise } from 'Lib/help';\r\nimport { getFunctionInRequest } from 'Request/data';\r\nimport Request from 'Request/request';\r\n\r\n// tslint:disable no-any no-unsafe-any\r\n\r\ninterface Idefer {\r\n    key: deferKey;\r\n    args: any[];\r\n}\r\n\r\ntype deferKey = string | string[] | IcommitObj[];\r\ntype deferKeyItem = string | IcommitObj;\r\n\r\ninterface Ithen {\r\n    resolve: Function;\r\n    reject: Function;\r\n}\r\n\r\ninterface IcommitObj {\r\n    handler: string;\r\n    args: any[];\r\n}\r\n\r\nconst isCommitObj: Function = (v: any): boolean => {\r\n    return isObject(v) ? 'handler' in v : false;\r\n};\r\n\r\nconst getKey: Function = (v: deferKeyItem): string => {\r\n    return isCommitObj(v) ? (<IcommitObj>v).handler : <string>v;\r\n};\r\n\r\nconst getArgs: Function = (v: deferKeyItem): any[] => {\r\n    return isCommitObj(v) ? (<IcommitObj>v).args : [];\r\n};\r\n\r\nconst hasRequest: Function = (key: deferKey, request: Request): boolean => {\r\n    if (isArray(key)) {\r\n        return (\r\n            (<(string | IcommitObj)[]>key).filter(\r\n                (v: string | IcommitObj): boolean =>\r\n                    !!getFunctionInRequest(getKey(v), request),\r\n            ).length === (<(string | IcommitObj)[]>key).length\r\n        );\r\n    } else {\r\n        return !!getFunctionInRequest(<string>key, request);\r\n    }\r\n};\r\n\r\nconst getAll: Function = (\r\n    key: (string | IcommitObj)[],\r\n    request: Request,\r\n    args: any[],\r\n): Function[] => {\r\n    return key.map((v: string | IcommitObj): Function =>\r\n        getFunctionInRequest(getKey(v), request)(...getArgs(v), ...args),\r\n    );\r\n};\r\n\r\n/**\r\n * default class Chain\r\n */\r\nexport default class Chain {\r\n    private request: Request;\r\n    private deferItem: Promise<any> | null;\r\n    private waitList: (Idefer | Ithen)[];\r\n    private resultList: any[];\r\n    private resolve: Function;\r\n    private reject: Function;\r\n\r\n    constructor(request: Request) {\r\n        this.request = request;\r\n        this.resultList = [];\r\n        this.waitList = [];\r\n    }\r\n\r\n    public commit(key: deferKey, ...args: any[]): Chain {\r\n        if (!hasRequest(key, this.request)) {\r\n            throw new Error(`can not find matched ${key} function`);\r\n        }\r\n\r\n        if (this.deferItem) {\r\n            this.waitList.push({\r\n                key,\r\n                args,\r\n            });\r\n        } else {\r\n            let defer: Promise<any>;\r\n            if (isArray(key)) {\r\n                defer = Promise.all(getAll(key, this.request, [...args]));\r\n            } else {\r\n                defer = getFunctionInRequest(<string>key, this.request)(\r\n                    ...args,\r\n                );\r\n            }\r\n            if (!isPromise(defer)) {\r\n                throw new Error(\r\n                    `The ${key} function not return a Promise function`,\r\n                );\r\n            }\r\n            this.deferItem = defer;\r\n            this.deferItem.then(\r\n                (result: any) => {\r\n                    this.commitChain(result);\r\n                },\r\n                (error: any) => {\r\n                    if (this.reject) {\r\n                        this.deferItem = null;\r\n                        this.reject(error);\r\n                    }\r\n                },\r\n            );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public then(resolve: Function, reject: Function): Chain {\r\n        this.waitList.push({\r\n            resolve,\r\n            reject,\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    public finish(resolve: Function, reject: Function): Chain {\r\n        this.resolve = resolve;\r\n        this.reject = reject;\r\n\r\n        return this;\r\n    }\r\n\r\n    // tslint:disable no-reserved-keywords\r\n    public catch(reject: Function): Chain {\r\n        this.reject = reject;\r\n\r\n        return this;\r\n    }\r\n    // tslint:enable no-reserved-keywords\r\n\r\n    private commitChain(result: any): void {\r\n        this.resultList.push(result);\r\n        if (this.waitList.length) {\r\n            const keyObj: Idefer | Ithen = this.waitList.shift();\r\n            this.deferItem = null;\r\n            if ('key' in keyObj) {\r\n                // object Idefer\r\n                this.commit(keyObj.key, ...keyObj.args, result);\r\n            } else {\r\n                // object Ithen\r\n                this.innerResolve(keyObj, result);\r\n            }\r\n        } else {\r\n            if (this.resolve) {\r\n                this.resolve(this.resultList);\r\n            }\r\n        }\r\n    }\r\n\r\n    private innerResolve(then: Ithen, result: any): Chain {\r\n        const deferItem: any = then.resolve(result);\r\n        if (isPromise(deferItem)) {\r\n            // object Promise\r\n            deferItem.then(\r\n                (data: any) => {\r\n                    this.commitChain(data);\r\n                },\r\n                (error: any) => {\r\n                    if (this.reject) {\r\n                        this.reject(error);\r\n                    }\r\n                },\r\n            );\r\n        } else if (deferItem[commitToken]) {\r\n            // another commit\r\n            this.commit(deferItem.key, ...deferItem.args);\r\n        } else {\r\n            this.commitChain(deferItem);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n","/*\r\n * @description request.ts\r\n */\r\n\r\nimport { commitToken } from 'Lib/conf';\r\nimport logger from 'Lib/logger';\r\nimport Chain from 'Request/chain';\r\n\r\n// tslint:disable no-any no-unsafe-any\r\n\r\nexport interface IRequest {\r\n    [key: string]: Function | IRequest;\r\n}\r\n\r\ninterface IModule {\r\n    [key: string]: IRequest;\r\n}\r\n\r\nexport interface IRequestConfig {\r\n    request: IRequest;\r\n    modules?: IModule;\r\n}\r\n\r\ninterface IoutputRequest {\r\n    request: IRequest;\r\n}\r\n\r\n// export interface IcommitWrap {\r\n//     [commitToken]: boolean;\r\n//     key: string;\r\n//     args: any[];\r\n// }\r\n\r\n/**\r\n * class Request\r\n */\r\nexport default class Request {\r\n    public request: IRequest;\r\n\r\n    private requestConfig: IRequestConfig;\r\n\r\n    constructor(request: IRequestConfig) {\r\n        this.requestConfig = request;\r\n\r\n        this.requestFormat();\r\n    }\r\n\r\n    public chain(): Chain {\r\n        return new Chain(this);\r\n    }\r\n\r\n    public commitWrap(key: string, ...args: any[]): object {\r\n        return {\r\n            [commitToken]: true,\r\n            key,\r\n            args: [...args],\r\n        };\r\n    }\r\n\r\n    private requestFormat(): void {\r\n        const outputRequest: IRequest = {};\r\n        const requestKes: string[] = Object.keys.call(\r\n            null,\r\n            this.requestConfig.request,\r\n        );\r\n        const modulesKeys: string[] = Object.keys.call(\r\n            null,\r\n            this.requestConfig.modules,\r\n        );\r\n\r\n        for (const i of requestKes) {\r\n            outputRequest[i] = this.requestConfig.request[i];\r\n        }\r\n\r\n        for (const i of modulesKeys) {\r\n            const tmpRequest: IRequest = {};\r\n            const tmpKeys: string[] = Object.keys.call(\r\n                null,\r\n                this.requestConfig.modules[i].request,\r\n            );\r\n            for (const j of tmpKeys) {\r\n                tmpRequest[j] = (<IRequest>this.requestConfig.modules[i]\r\n                    .request)[j];\r\n            }\r\n            outputRequest[i] = tmpRequest;\r\n        }\r\n\r\n        this.request = outputRequest;\r\n    }\r\n}\r\n"],"names":["commitToken","key","Symbol","isArray","obj","Object","prototype","toString","call","isObject","isPromise","then","e","getFunctionInRequest","request","iRequest","indexOf","keys","split","map","v","Function","isCommitObj","getKey","handler","getArgs","args","hasRequest","filter","length","getAll","resultList","waitList","Error","deferItem","push","defer","Promise","all","result","commitChain","error","reject","resolve","keyObj","shift","commit","innerResolve","data","requestConfig","requestFormat","Chain","outputRequest","requestKes","modulesKeys","modules","i","tmpRequest","tmpKeys","j"],"mappings":"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"}