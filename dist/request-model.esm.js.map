{"version":3,"file":"request-model.esm.js","sources":["../src/lib/conf.ts","../src/lib/help.ts","../src/request/data.ts","../src/request/chain.ts","../src/request/request.ts"],"sourcesContent":["/**\r\n * @desciption conf\r\n */\r\n\r\nexport const commitToken: symbol | string = ((): symbol | string => {\r\n    const key: string = '__REQUEST__MODEL__COMMIT__TOKEN';\r\n    if (Symbol) {\r\n        return Symbol(key);\r\n    } else {\r\n        return key;\r\n    }\r\n})();\r\n","/**\r\n * @description help\r\n */\r\n\r\n// tslint:disable no-any no-unsafe-any\r\n\r\nexport const isArray: Function = (obj: any): boolean => {\r\n    return Object.prototype.toString.call(obj) === '[object Array]';\r\n};\r\n\r\nexport const isObject: Function = (obj: any): boolean => {\r\n    return Object.prototype.toString.call(obj) === '[object Object]';\r\n};\r\nexport const isFunction: Function = (obj: any): obj is Function => {\r\n    return Function.prototype.toString.call(obj) === '[object Function]';\r\n};\r\n\r\nexport const isPromise: Function = (obj: any): boolean => {\r\n    try {\r\n        return typeof obj.then === 'function';\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n};\r\n","/**\r\n * @description help to find data in Request\r\n */\r\nimport { IRequest } from 'Request/request';\r\n\r\ntype Iresult = Function | undefined;\r\n\r\nexport const getFunctionInRequest: Function = (\r\n    key: string,\r\n    request: IRequest,\r\n): Iresult => {\r\n    let iRequest: IRequest | Function = request;\r\n    if (key.indexOf('/') !== -1) {\r\n        const keys: string[] = key.split('/');\r\n        keys.map((v: string): void => {\r\n            if (!(iRequest instanceof Function)) {\r\n                iRequest = iRequest[v];\r\n            }\r\n        });\r\n    } else {\r\n        iRequest = iRequest[key];\r\n    }\r\n    if (iRequest instanceof Function) {\r\n        return iRequest;\r\n    }\r\n};\r\n","/**\r\n * @description chain\r\n */\r\nimport { commitToken } from 'Lib/conf';\r\nimport { isArray, isObject, isPromise } from 'Lib/help';\r\nimport { getFunctionInRequest } from 'Request/data';\r\nimport { IAction, IcommitWrap, IRequest } from 'Request/request';\r\n\r\n// tslint:disable no-any no-unsafe-any\r\n\r\ninterface Idefer {\r\n    key: deferKey;\r\n    args: any[];\r\n}\r\n\r\ntype deferKey = string | string[] | IcommitObj[];\r\ntype deferKeyItem = string | IcommitObj;\r\n\r\ninterface Ithen {\r\n    resolve: Function;\r\n    reject: Function;\r\n}\r\n\r\ninterface IcommitObj {\r\n    handler: string;\r\n    args: any[];\r\n}\r\n\r\nfunction isIdefer(v: any): v is Idefer {\r\n    // return 'key' in v;\r\n    return v.key !== undefined;\r\n}\r\nconst isCommitObj: Function = (v: any): boolean => {\r\n    return isObject(v) ? 'handler' in v : false;\r\n};\r\n\r\nconst getKey: Function = (v: deferKeyItem): string => {\r\n    return isCommitObj(v) ? (<IcommitObj>v).handler : <string>v;\r\n};\r\n\r\nconst getArgs: Function = (v: deferKeyItem): any[] => {\r\n    return isCommitObj(v) ? (<IcommitObj>v).args : [];\r\n};\r\n\r\nconst hasRequest: Function = (key: deferKey, request: IRequest): boolean => {\r\n    if (isArray(key)) {\r\n        return (\r\n            (<(string | IcommitObj)[]>key).filter(\r\n                (v: string | IcommitObj): boolean =>\r\n                    !!getFunctionInRequest(getKey(v), request),\r\n            ).length === (<(string | IcommitObj)[]>key).length\r\n        );\r\n    } else {\r\n        return !!getFunctionInRequest(<string>key, request);\r\n    }\r\n};\r\n\r\nconst getAll: Function = (\r\n    key: (string | IcommitObj)[],\r\n    request: IRequest,\r\n    args: any[],\r\n): Function[] => {\r\n    return key.map(\r\n        (v: string | IcommitObj): Function =>\r\n            getFunctionInRequest(getKey(v), request)(...getArgs(v), ...args),\r\n    );\r\n};\r\n\r\n/**\r\n * default class Chain\r\n */\r\nexport default class Chain {\r\n    private request: IRequest;\r\n    private actionFun: IAction;\r\n    private deferItem: Promise<any> | null;\r\n    private waitList: (Idefer | Ithen)[];\r\n    private resultList: any[];\r\n    private resolve: Function;\r\n    private reject: Function;\r\n\r\n    constructor(request: IRequest, action: IAction) {\r\n        this.request = request;\r\n        this.resultList = [];\r\n        this.waitList = [];\r\n        this.actionFun = action;\r\n    }\r\n\r\n    public commit(key: deferKey, ...args: any[]): Chain {\r\n        if (!hasRequest(key, this.request)) {\r\n            throw new Error(`can not find matched ${key} function`);\r\n        }\r\n\r\n        if (this.deferItem) {\r\n            this.waitList.push({\r\n                key,\r\n                args,\r\n            });\r\n        } else {\r\n            let defer: Promise<any>;\r\n            if (isArray(key)) {\r\n                defer = Promise.all(getAll(key, this.request, [...args]));\r\n            } else {\r\n                defer = getFunctionInRequest(<string>key, this.request)(\r\n                    ...args,\r\n                );\r\n            }\r\n            if (!isPromise(defer)) {\r\n                throw new Error(\r\n                    `The ${key} function not return a Promise function`,\r\n                );\r\n            }\r\n            // call entry one\r\n            this.deferItem = defer;\r\n            this.deferItem.then(\r\n                (result: any) => {\r\n                    this.commitChain(result);\r\n                },\r\n                (error: any) => {\r\n                    this.innerRejection(error);\r\n                },\r\n            );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public then(resolve: Function, reject: Function): Chain {\r\n        if (this.deferItem) {\r\n            this.waitList.push({\r\n                resolve,\r\n                reject,\r\n            });\r\n        } else {\r\n            this.innerResolve({ resolve, reject });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public finish(resolve: Function, reject: Function): Chain {\r\n        this.resolve = resolve;\r\n        this.reject = reject;\r\n\r\n        return this;\r\n    }\r\n\r\n    // tslint:disable no-reserved-keywords\r\n    public catch(reject: Function): Chain {\r\n        this.reject = reject;\r\n\r\n        return this;\r\n    }\r\n    // tslint:enable no-reserved-keywords\r\n\r\n    public action(key: string, ...args: any[]): Chain {\r\n        return this.actionFun[key].call(null, this, ...args);\r\n    }\r\n\r\n    private commitChain(result: any): void {\r\n        this.resultList.push(result);\r\n        if (this.waitList.length) {\r\n            const keyObj: Idefer | Ithen = this.waitList.shift();\r\n            this.deferItem = null;\r\n            // if ('key' in keyObj) {\r\n            if (isIdefer(keyObj)) {\r\n                // object Idefer\r\n                this.commit(keyObj.key, ...keyObj.args, result);\r\n            } else {\r\n                // object Ithen\r\n                this.innerResolve(keyObj, result);\r\n            }\r\n        } else {\r\n            if (this.resolve) {\r\n                this.resolve(this.resultList);\r\n            }\r\n        }\r\n    }\r\n\r\n    private innerResolve(then: Ithen, result?: any): Chain {\r\n        // call entry two\r\n        let deferItem: any;\r\n        try {\r\n            deferItem = then.resolve(result);\r\n        } catch (e) {\r\n            this.innerRejection(e);\r\n        }\r\n        if (isPromise(deferItem)) {\r\n            // object Promise\r\n            this.deferItem = deferItem;\r\n            deferItem.then(\r\n                (data: any) => {\r\n                    this.commitChain(data);\r\n                },\r\n                (error: any) => {\r\n                    this.innerRejection(error);\r\n                },\r\n            );\r\n        } else if (isArray(deferItem)) {\r\n            // 暂时可以认为一定是 commitAll 包装\r\n            const item: IcommitObj[] = deferItem.map((v: IcommitWrap) => {\r\n                return {\r\n                    handler: v.key,\r\n                    args: v.args,\r\n                };\r\n            });\r\n            this.commit(item);\r\n        } else if (deferItem !== undefined && deferItem[commitToken]) {\r\n            // another commit\r\n            this.commit(deferItem.key, ...deferItem.args);\r\n        } else {\r\n            this.commitChain(deferItem);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private innerRejection(error: any, fn?: Function): void {\r\n        let reject!: Function;\r\n        if (this.waitList.length && !isIdefer(this.waitList[0])) {\r\n            reject = (<Ithen>this.waitList[0]).reject;\r\n        } else {\r\n            reject = this.reject;\r\n        }\r\n        if (reject) {\r\n            fn && fn();\r\n            this.deferItem = null;\r\n            reject(error);\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @description request.ts\r\n */\r\n\r\nimport { commitToken } from 'Lib/conf';\r\nimport logger from 'Lib/logger';\r\nimport Chain from 'Request/chain';\r\n\r\n// tslint:disable no-any no-unsafe-any\r\n\r\nexport interface IRequest {\r\n    [key: string]: Function | IRequest;\r\n}\r\n\r\ninterface IModule {\r\n    [key: string]: IRequestConfig;\r\n}\r\n\r\nexport interface IAction {\r\n    [key: string]: Function;\r\n}\r\n\r\ninterface IConfig {\r\n    promiseWrap?: boolean;\r\n    [key: string]: boolean;\r\n}\r\n\r\nexport interface IcommitWrap {\r\n    key: string;\r\n    args: any[];\r\n}\r\n\r\nexport interface IRequestConfig {\r\n    request: IRequest;\r\n    modules?: IModule;\r\n    config?: IConfig;\r\n    action?: IAction;\r\n}\r\n\r\ninterface IoutputRequest {\r\n    request: IRequest;\r\n}\r\n\r\ninterface IrequestConfig {\r\n    config: IConfig;\r\n    modules?: {\r\n        [key: string]: IConfig;\r\n    };\r\n}\r\n\r\nconst defaultConfig: IConfig = {\r\n    promiseWrap: false,\r\n};\r\n\r\n// export interface IcommitWrap {\r\n//     [commitToken]: boolean;\r\n//     key: string;\r\n//     args: any[];\r\n// }\r\n\r\n// tslint:disable promise-function-async\r\nconst formatFunctionToPromise: Function = (\r\n    flag: boolean,\r\n    fn: Function,\r\n): Function => {\r\n    if (flag) {\r\n        return (...args: any[]): Promise<any> => {\r\n            return new Promise(\r\n                (resolve: Function, reject: Function): any => {\r\n                    fn.call(null, resolve, reject, ...args);\r\n                },\r\n            );\r\n        };\r\n    } else {\r\n        return fn;\r\n    }\r\n};\r\n// tslint:enable promise-function-async\r\n\r\n/**\r\n * class Request\r\n */\r\nexport default class Request {\r\n    public request: IRequest;\r\n\r\n    private requestConfig: IRequestConfig;\r\n    private setting: IrequestConfig;\r\n    private action: IAction;\r\n\r\n    constructor(request: IRequestConfig) {\r\n        this.requestConfig = request;\r\n\r\n        this.setting = this.getRequestConfig();\r\n        this.action = this.requestConfig.action;\r\n        this.requestFormat();\r\n    }\r\n\r\n    public chain(): Chain {\r\n        return new Chain(this.request, this.action);\r\n    }\r\n\r\n    public commitWrap(key: string, ...args: any[]): object {\r\n        return {\r\n            [commitToken]: true,\r\n            key,\r\n            args: [...args],\r\n        };\r\n    }\r\n\r\n    public commitAll(commitWrap: IcommitWrap[]): object[] {\r\n        return commitWrap.map(\r\n            (v: IcommitWrap): object => {\r\n                return {\r\n                    [commitToken]: true,\r\n                    key: v.key,\r\n                    args: [...v.args],\r\n                };\r\n            },\r\n        );\r\n    }\r\n\r\n    private requestFormat(): void {\r\n        const outputRequest: IRequest = {};\r\n        const requestKes: string[] = Object.keys.call(\r\n            null,\r\n            this.requestConfig.request || {},\r\n        );\r\n        const modulesKeys: string[] = Object.keys.call(\r\n            null,\r\n            this.requestConfig.modules || {},\r\n        );\r\n\r\n        for (const i of requestKes) {\r\n            outputRequest[i] = formatFunctionToPromise(\r\n                this.setting.config.promiseWrap,\r\n                this.requestConfig.request[i],\r\n            );\r\n        }\r\n\r\n        for (const i of modulesKeys) {\r\n            const tmpRequest: IRequest = {};\r\n            const tmpKeys: string[] = Object.keys.call(\r\n                null,\r\n                this.requestConfig.modules[i].request || {},\r\n            );\r\n            for (const j of tmpKeys) {\r\n                tmpRequest[j] = formatFunctionToPromise(\r\n                    this.setting.modules[i].promiseWrap,\r\n                    <Function>this.requestConfig.modules[i].request[j],\r\n                );\r\n            }\r\n            outputRequest[i] = tmpRequest;\r\n        }\r\n\r\n        this.request = outputRequest;\r\n    }\r\n\r\n    private getRequestConfig(): IrequestConfig {\r\n        const tmpConfig: IrequestConfig = {\r\n            config: defaultConfig,\r\n            modules: {},\r\n        };\r\n        const keys: string[] = Object.keys.call(\r\n            null,\r\n            this.requestConfig.config || {},\r\n        );\r\n        const modulesKeys: string[] = Object.keys.call(\r\n            null,\r\n            this.requestConfig.modules || {},\r\n        );\r\n\r\n        keys.map(\r\n            (v: string): void => {\r\n                tmpConfig.config[v] = this.requestConfig.config[v];\r\n            },\r\n        );\r\n\r\n        for (const i of modulesKeys) {\r\n            tmpConfig.modules[i] = { ...tmpConfig.config };\r\n            const tmpKeys: string[] = Object.keys.call(\r\n                null,\r\n                this.requestConfig.modules[i].config || {},\r\n            );\r\n            for (const j of tmpKeys) {\r\n                tmpConfig.modules[i][j] = this.requestConfig.modules[i].config[\r\n                    j\r\n                ];\r\n            }\r\n        }\r\n\r\n        return tmpConfig;\r\n    }\r\n}\r\n"],"names":["commitToken","key","Symbol","isArray","obj","Object","prototype","toString","call","isObject","isPromise","then","e","getFunctionInRequest","request","iRequest","indexOf","keys","split","map","v","Function","undefined","isCommitObj","getKey","handler","getArgs","args","hasRequest","filter","length","getAll","action","resultList","waitList","actionFun","Error","deferItem","push","defer","Promise","all","result","commitChain","error","innerRejection","resolve","reject","innerResolve","keyObj","shift","isIdefer","commit","data","item","fn","defaultConfig","formatFunctionToPromise","flag","requestConfig","setting","getRequestConfig","requestFormat","Chain","commitWrap","outputRequest","requestKes","modulesKeys","modules","i","config","promiseWrap","tmpRequest","tmpKeys","j","tmpConfig"],"mappings":"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"}