{"version":3,"file":"request-model.esm.js","sources":["../src/lib/conf.ts","../src/lib/help.ts","../src/request/data.ts","../src/request/chain.ts","../src/request/collection.ts","../src/request/request.ts"],"sourcesContent":["/**\n * @desciption conf\n */\n\nexport const commitToken: symbol | string = ((): symbol | string => {\n    const key: string = '__REQUEST__MODEL__COMMIT__TOKEN';\n    if (Symbol) {\n        return Symbol(key);\n    } else {\n        return key;\n    }\n})();\n","/**\n * @description help\n */\n\n// tslint:disable no-any no-unsafe-any\n\nexport const isArray: Function = (obj: any): boolean => {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexport const isObject: Function = (obj: any): boolean => {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n};\nexport const isFunction: Function = (obj: any): obj is Function => {\n    return Object.prototype.toString.call(obj) === '[object Function]';\n};\n\nexport const isPromise: Function = (obj: any): boolean => {\n    try {\n        return typeof obj.then === 'function';\n    } catch (e) {\n        return false;\n    }\n};\n\nexport const getFunctionName: Function = (input: Function): string => {\n    const result: RegExpExecArray = /^function\\s+([\\w\\$]+)\\s*\\(/.exec(\n        input.toString(),\n    );\n\n    return result ? result[1] : '';\n};\n","/**\n * @description help to find data in Request\n */\nimport { IRequest } from 'Request/request';\n\ntype Iresult = Function | undefined;\n\nexport const getFunctionInRequest: Function = (\n    key: string,\n    request: IRequest,\n): Iresult => {\n    let iRequest: IRequest = request;\n    let result: Function;\n    try {\n        if (key.indexOf('/') !== -1) {\n            const keys: string[] = key.split('/');\n            keys.map(\n                (v: string, i: number): void => {\n                    if (i !== keys.length - 1) {\n                        iRequest = iRequest.modules[v];\n                    } else {\n                        result = iRequest.request[v];\n                    }\n                },\n            );\n        } else {\n            result = iRequest.request[key];\n        }\n    } catch (e) {}\n\n    return result;\n};\n","/**\n * @description chain\n */\nimport { commitToken } from 'Lib/conf';\nimport { isArray, isObject, isPromise } from 'Lib/help';\nimport { getFunctionInRequest } from 'Request/data';\nimport { IAction, IcommitWrap, IRequest } from 'Request/request';\n\n// tslint:disable no-any no-unsafe-any\n\ninterface Idefer {\n    key: deferKey;\n    args: any[];\n}\n\ntype deferKey = string | string[] | IcommitObj[];\ntype deferKeyItem = string | IcommitObj;\n\ninterface Ithen {\n    resolve: Function;\n    reject: Function;\n    always?: Function;\n    before?: Function;\n}\n\ninterface IcommitObj {\n    handler: string;\n    args: any[];\n}\n\nfunction isIdefer(v: any): v is Idefer {\n    return v.key !== undefined;\n}\nconst isCommitObj: Function = (v: any): boolean => {\n    return isObject(v) ? 'handler' in v : false;\n};\n\nconst getKey: Function = (v: deferKeyItem): string => {\n    return isCommitObj(v) ? (<IcommitObj>v).handler : <string>v;\n};\n\nconst getArgs: Function = (v: deferKeyItem): any[] => {\n    return isCommitObj(v) ? (<IcommitObj>v).args : [];\n};\n\nconst hasRequest: Function = (key: deferKey, request: IRequest): string => {\n    if (isArray(key)) {\n        const keys: (string | IcommitObj)[] = (<(string | IcommitObj)[]>(\n            key\n        )).filter(\n            (v: string | IcommitObj): boolean =>\n                !getFunctionInRequest(getKey(v), request),\n        );\n\n        return keys.length\n            ? keys.map((v: IcommitObj) => (v.handler ? v.handler : v)).join(',')\n            : '';\n    } else {\n        return getFunctionInRequest(<string>key, request) ? '' : <string>key;\n    }\n};\n\nconst getAll: Function = (\n    key: (string | IcommitObj)[],\n    request: IRequest,\n    args: any[],\n): Function[] => {\n    return key.map(\n        (v: string | IcommitObj): Function =>\n            getFunctionInRequest(getKey(v), request)(...getArgs(v), ...args),\n    );\n};\n\n// tslint:disable-next-line no-empty\nconst noop: Function = (): void => {};\n\n/**\n * default class Chain\n */\nexport default class Chain {\n    protected request: IRequest;\n    private actionFun: IAction;\n    private deferItem: Promise<any> | null;\n    private waitList: (Idefer | Ithen)[];\n    private resultList: any[];\n    private resolve: Function;\n    private reject: Function;\n    private alwaysFn: Function;\n    private unResolveRejection: any;\n\n    constructor(request: IRequest, action: IAction) {\n        this.request = request;\n        this.resultList = [];\n        this.waitList = [];\n        this.actionFun = action;\n    }\n\n    public commit(key: deferKey, ...args: any[]): Chain {\n        if (this.unResolveRejection) {\n            return this;\n        }\n        const keyStr: string = hasRequest(key, this.request);\n        if (keyStr) {\n            throw new Error(`can not find matched commit key: ${keyStr}`);\n        }\n\n        if (this.deferItem) {\n            this.waitList.push({\n                key,\n                args,\n            });\n        } else {\n            let defer: Promise<any>;\n            if (isArray(key)) {\n                defer = Promise.all(getAll(key, this.request, [...args]));\n            } else {\n                defer = getFunctionInRequest(<string>key, this.request)(\n                    ...args,\n                );\n            }\n            if (!isPromise(defer)) {\n                throw new Error(\n                    `The ${key} function not return a Promise function`,\n                );\n            }\n            // call entry one\n            this.deferItem = defer;\n            this.deferItem.then(\n                (result: any) => {\n                    this.commitChain(result);\n                },\n                (error: any) => {\n                    this.innerRejection(error);\n                },\n            );\n        }\n\n        return this;\n    }\n\n    public then(\n        resolve: Function,\n        reject?: Function,\n        always?: Function,\n        before?: Function,\n    ): Chain {\n        if (this.deferItem) {\n            this.waitList.push({\n                resolve,\n                reject,\n                always,\n                before,\n            });\n        } else {\n            this.innerResolve({ resolve, reject, always, before });\n        }\n\n        return this;\n    }\n\n    public finish(\n        resolve: Function,\n        reject?: Function,\n        always?: Function,\n    ): Chain {\n        if (!this.waitList.length && !this.deferItem) {\n            this.innerResolve({ resolve, reject, always });\n        } else {\n            this.resolve = resolve;\n            this.reject = reject ? reject : this.reject;\n        }\n\n        return this;\n    }\n\n    // tslint:disable-next-line no-reserved-keywords\n    public finally(\n        resolve: Function,\n        reject?: Function,\n        always?: Function,\n    ): Chain {\n        return this.finish(resolve, reject, always);\n    }\n\n    // tslint:disable-next-line no-reserved-keywords\n    public catch(reject: Function): Chain {\n        if (!this.waitList.length && !this.deferItem) {\n            this.innerResolve({ resolve: noop, reject });\n        } else {\n            this.reject = reject;\n        }\n\n        return this;\n    }\n\n    public always(always: Function): Chain {\n        this.alwaysFn = always;\n\n        return this;\n    }\n\n    public action(key: string, ...args: any[]): Chain {\n        return this.actionFun[key].call(null, this, ...args);\n    }\n\n    private commitChain(result: any): void {\n        this.resultList.push(result);\n        if (this.waitList.length) {\n            const keyObj: Idefer | Ithen = this.waitList.shift();\n            this.deferItem = null;\n            if (isIdefer(keyObj)) {\n                // object Idefer\n                this.commit(keyObj.key, ...keyObj.args, result);\n            } else {\n                // object Ithen\n                this.innerResolve(keyObj, result);\n            }\n        } else {\n            if (this.resolve) {\n                this.resolve(this.resultList);\n            }\n\n            this.innerAlways();\n        }\n    }\n\n    private innerResolve(then: Ithen, result?: any): Chain {\n        // call entry two\n        let deferItem: any;\n        if (this.unResolveRejection) {\n            if (then.reject) {\n                if (then.before) {\n                    then.before();\n                }\n                then.reject(this.unResolveRejection);\n                if (then.always) {\n                    then.always();\n                }\n                this.unResolveRejection = null;\n            } else if (\n                this.innerRejection(this.unResolveRejection, then.always)\n            ) {\n                this.unResolveRejection = null;\n            }\n\n            return this;\n        } else {\n            try {\n                if (then.before) {\n                    then.before();\n                }\n                deferItem = then.resolve(result);\n                if (then.always) {\n                    then.always();\n                }\n            } catch (e) {\n                if (!this.innerRejection(e, then.always)) {\n                    this.unResolveRejection = e;\n                }\n\n                return this;\n            }\n        }\n        if (isPromise(deferItem)) {\n            // object Promise\n            this.deferItem = deferItem;\n            deferItem.then(\n                (data: any) => {\n                    this.commitChain(data);\n                },\n                (error: any) => {\n                    this.innerRejection(error, deferItem.always);\n                },\n            );\n        } else if (isArray(deferItem)) {\n            // 暂时可以认为一定是 commitAll 包装\n            const item: IcommitObj[] = deferItem.map((v: IcommitWrap) => {\n                return {\n                    handler: v.key,\n                    args: v.args,\n                };\n            });\n            this.commit(item);\n        } else if (deferItem !== undefined && deferItem[commitToken]) {\n            // another commit\n            this.commit(deferItem.key, ...deferItem.args);\n        } else {\n            this.commitChain(deferItem);\n        }\n\n        return this;\n    }\n\n    // fn may be the always fn\n    private innerRejection(error: any, fn?: Function): boolean {\n        let reject!: Function;\n        let always: Function = fn;\n        // if (this.waitList.length && !isIdefer(this.waitList[0])) {\n        if (this.waitList.length) {\n            let index: number = 0;\n            for (let i: number = 0; i < this.waitList.length; i = i + 1) {\n                if (\n                    !isIdefer(this.waitList[i]) &&\n                    (<Ithen>this.waitList[i]).reject\n                ) {\n                    reject = (<Ithen>this.waitList[i]).reject;\n                    always = (<Ithen>this.waitList[i]).always;\n                    index = i;\n                    break;\n                }\n            }\n            this.waitList.splice(0, index);\n        }\n        if (!reject && this.reject) {\n            reject = this.reject;\n        }\n        if (reject) {\n            this.deferItem = null;\n            reject(error);\n            if (always) {\n                always();\n            }\n            this.innerAlways();\n\n            return true;\n        } else {\n            this.innerAlways();\n\n            return false;\n        }\n    }\n\n    private innerAlways(): void {\n        if (this.alwaysFn) {\n            this.alwaysFn();\n        }\n    }\n}\n","/**\n * @desc collection class\n */\n\nimport { getFunctionName, isFunction } from 'Lib/help';\nimport Chain from 'Request/chain';\n\nexport default class Collection extends Chain {\n    constructor() {\n        super({ request: {}, modules: {} }, {});\n    }\n\n    public add(fn: Function, key?: string): Collection {\n        // may use for js\n        if (!isFunction(fn)) {\n            throw new Error('The input must be a Function.');\n        }\n\n        if (!getFunctionName(fn) && !key) {\n            throw new Error('The input function must have a name.');\n        }\n\n        const name: string = key || getFunctionName(fn);\n        this.request.request[name] = fn;\n\n        return this;\n    }\n}\n","/*\n * @description request.ts\n */\n\nimport { commitToken } from 'Lib/conf';\nimport logger from 'Lib/logger';\nimport Chain from 'Request/chain';\nimport Collection from 'Request/collection';\n\n// tslint:disable no-any no-unsafe-any\n\n// export interface IRequest {\n//     [key: string]: Function | IRequest;\n// }\nexport interface IRequest {\n    request: {\n        [key: string]: Function;\n    };\n    modules: {\n        [key: string]: IRequest;\n    };\n}\n\nexport interface Irequest {\n    [key: string]: Function;\n}\n\ninterface IModule {\n    [key: string]: IRequestConfig;\n}\n\nexport interface IAction {\n    [key: string]: Function;\n}\n\ninterface IConfig {\n    promiseWrap?: boolean;\n    [key: string]: boolean;\n}\n\nexport interface IcommitWrap {\n    key: string;\n    args: any[];\n}\n\nexport interface IRequestConfig {\n    request: Irequest;\n    modules?: IModule;\n    config?: IConfig;\n    action?: IAction;\n}\n\ninterface IoutputRequest {\n    request: IRequest;\n}\n\ninterface IrequestConfig {\n    config: IConfig;\n    modules: {\n        [key: string]: IrequestConfig;\n    };\n}\n\nconst defaultConfig: IConfig = {\n    promiseWrap: false,\n};\n\n// export interface IcommitWrap {\n//     [commitToken]: boolean;\n//     key: string;\n//     args: any[];\n// }\n\n// tslint:disable promise-function-async\nconst formatFunctionToPromise: Function = (\n    flag: boolean,\n    fn: Function,\n): Function => {\n    if (flag) {\n        return (...args: any[]): Promise<any> => {\n            return new Promise(\n                (resolve: Function, reject: Function): any => {\n                    fn.call(null, resolve, reject, ...args);\n                },\n            );\n        };\n    } else {\n        return fn;\n    }\n};\n// tslint:enable promise-function-async\n\n/**\n * class Request\n */\nexport default class Request {\n    public request: IRequest;\n\n    private requestConfig: IRequestConfig;\n    private setting: IrequestConfig;\n    private actionCollection: IAction;\n\n    constructor(request: IRequestConfig) {\n        this.requestConfig = request;\n\n        this.setting = this.getRequestConfig();\n        this.actionCollection = this.requestConfig.action;\n        this.requestFormat();\n    }\n\n    public static PROMISEWRAP(fn: Function): Function {\n        return formatFunctionToPromise(true, fn);\n    }\n\n    public chain(): Chain {\n        return new Chain(this.request, this.actionCollection);\n    }\n\n    public collection(): Collection {\n        return new Collection();\n    }\n\n    // add request\n    public add(): void {}\n\n    // wrap-start: wrap method to avoid use chain\n    public commit(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.commit.apply(chain, args);\n    }\n\n    public action(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.action.apply(chain, args);\n    }\n\n    public then(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.then.apply(chain, args);\n    }\n\n    public finish(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.finish.apply(chain, args);\n    }\n\n    // tslint:disable-next-line no-reserved-keywords\n    public catch(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.catch.apply(chain, args);\n    }\n\n    public always(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.always.apply(chain, args);\n    }\n\n    // tslint:disable-next-line no-reserved-keywords\n    public finally(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.finally.apply(chain, args);\n    }\n    // wrap end\n\n    public commitWrap(key: string, ...args: any[]): object {\n        return {\n            [commitToken]: true,\n            key,\n            args: [...args],\n        };\n    }\n\n    public commitAll(commitWrap: IcommitWrap[]): object[] {\n        return commitWrap.map(\n            (v: IcommitWrap): object => {\n                return {\n                    [commitToken]: true,\n                    key: v.key,\n                    args: [...v.args],\n                };\n            },\n        );\n    }\n\n    private requestFormat(): void {\n        const outputRequest: IRequest = {\n            request: {},\n            modules: {},\n        };\n        const requestKes: string[] = Object.keys.call(\n            null,\n            this.requestConfig.request || {},\n        );\n        const modulesKeys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.modules || {},\n        );\n\n        for (const i of requestKes) {\n            outputRequest.request[i] = formatFunctionToPromise(\n                this.setting.config.promiseWrap,\n                this.requestConfig.request[i],\n            );\n        }\n\n        const loopRequest: Function = (\n            mKeys: string[],\n            setting: IrequestConfig,\n            pModule: IModule,\n            resultRequest: IRequest,\n        ): void => {\n            for (const i of mKeys) {\n                const tmpRequest: IRequest = {\n                    request: {},\n                    modules: {},\n                };\n                const tmpKeys: string[] = Object.keys.call(\n                    null,\n                    pModule[i].request || {},\n                );\n                for (const j of tmpKeys) {\n                    tmpRequest.request[j] = formatFunctionToPromise(\n                        setting.modules[i].config.promiseWrap,\n                        <Function>pModule[i].request[j],\n                    );\n                }\n                resultRequest.modules[i] = tmpRequest;\n\n                const subModules: string[] = Object.keys.call(\n                    null,\n                    pModule[i].modules || {},\n                );\n                if (subModules.length) {\n                    loopRequest(\n                        subModules,\n                        setting.modules[i],\n                        pModule[i].modules,\n                        resultRequest.modules[i],\n                    );\n                }\n            }\n        };\n        loopRequest(\n            modulesKeys,\n            this.setting,\n            this.requestConfig.modules,\n            outputRequest,\n        );\n\n        this.request = outputRequest;\n    }\n\n    private getRequestConfig(): IrequestConfig {\n        const tmpConfig: IrequestConfig = {\n            config: defaultConfig,\n            modules: {},\n        };\n        const keys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.config || {},\n        );\n        const modulesKeys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.modules || {},\n        );\n\n        keys.map(\n            (v: string): void => {\n                tmpConfig.config[v] = this.requestConfig.config[v];\n            },\n        );\n\n        const loopModules: Function = (\n            modulesKey: string[],\n            modules: IModule,\n            pModules: IrequestConfig,\n        ): void => {\n            for (const i of modulesKey) {\n                pModules.modules[i] = {\n                    config: { ...pModules.config },\n                    modules: {},\n                };\n                const tmpKeys: string[] = Object.keys.call(\n                    null,\n                    modules[i].config || {},\n                );\n                for (const j of tmpKeys) {\n                    pModules.modules[i].config[j] = modules[i].config[j];\n                }\n\n                // 如果还有子module 循环\n                const subModules: string[] = Object.keys.call(\n                    null,\n                    modules[i].modules || {},\n                );\n                if (subModules.length) {\n                    loopModules(\n                        subModules,\n                        modules[i].modules,\n                        pModules.modules[i],\n                    );\n                }\n            }\n        };\n        loopModules(modulesKeys, this.requestConfig.modules, tmpConfig);\n\n        return tmpConfig;\n    }\n}\n"],"names":["commitToken","key","Symbol","isArray","obj","Object","prototype","toString","call","isObject","isFunction","isPromise","then","e","getFunctionName","input","result","exec","getFunctionInRequest","request","iRequest","indexOf","keys","split","map","v","i","length","modules","undefined","isCommitObj","getKey","handler","getArgs","args","hasRequest","filter","join","getAll","noop","action","resultList","waitList","actionFun","unResolveRejection","keyStr","Error","deferItem","push","defer","Promise","all","commitChain","error","innerRejection","resolve","reject","always","before","innerResolve","finish","alwaysFn","keyObj","shift","isIdefer","commit","innerAlways","data","item","fn","index","splice","name","Chain","defaultConfig","formatFunctionToPromise","flag","requestConfig","setting","getRequestConfig","actionCollection","requestFormat","Collection","chain","apply","catch","finally","commitWrap","outputRequest","requestKes","modulesKeys","config","promiseWrap","loopRequest","mKeys","pModule","resultRequest","tmpRequest","tmpKeys","j","subModules","tmpConfig","loopModules","modulesKey","pModules"],"mappings":"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"}