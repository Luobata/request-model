{"version":3,"file":"request-model.esm.js","sources":["../src/lib/conf.ts","../src/lib/help.ts","../src/request/data.ts","../src/request/chain.ts","../src/request/request.ts"],"sourcesContent":["/**\n * @desciption conf\n */\n\nexport const commitToken: symbol | string = ((): symbol | string => {\n    const key: string = '__REQUEST__MODEL__COMMIT__TOKEN';\n    if (Symbol) {\n        return Symbol(key);\n    } else {\n        return key;\n    }\n})();\n","/**\n * @description help\n */\n\n// tslint:disable no-any no-unsafe-any\n\nexport const isArray: Function = (obj: any): boolean => {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexport const isObject: Function = (obj: any): boolean => {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n};\nexport const isFunction: Function = (obj: any): obj is Function => {\n    return Function.prototype.toString.call(obj) === '[object Function]';\n};\n\nexport const isPromise: Function = (obj: any): boolean => {\n    try {\n        return typeof obj.then === 'function';\n    } catch (e) {\n        return false;\n    }\n};\n","/**\n * @description help to find data in Request\n */\nimport { IRequest } from 'Request/request';\n\ntype Iresult = Function | undefined;\n\nexport const getFunctionInRequest: Function = (\n    key: string,\n    request: IRequest,\n): Iresult => {\n    let iRequest: IRequest | Function = request;\n    if (key.indexOf('/') !== -1) {\n        const keys: string[] = key.split('/');\n        keys.map((v: string): void => {\n            if (!(iRequest instanceof Function)) {\n                iRequest = iRequest[v];\n            }\n        });\n    } else {\n        iRequest = iRequest[key];\n    }\n    if (iRequest instanceof Function) {\n        return iRequest;\n    }\n};\n","/**\n * @description chain\n */\nimport { commitToken } from 'Lib/conf';\nimport { isArray, isObject, isPromise } from 'Lib/help';\nimport { getFunctionInRequest } from 'Request/data';\nimport { IAction, IcommitWrap, IRequest } from 'Request/request';\n\n// tslint:disable no-any no-unsafe-any\n\ninterface Idefer {\n    key: deferKey;\n    args: any[];\n}\n\ntype deferKey = string | string[] | IcommitObj[];\ntype deferKeyItem = string | IcommitObj;\n\ninterface Ithen {\n    resolve: Function;\n    reject: Function;\n}\n\ninterface IcommitObj {\n    handler: string;\n    args: any[];\n}\n\nfunction isIdefer(v: any): v is Idefer {\n    // return 'key' in v;\n    return v.key !== undefined;\n}\nconst isCommitObj: Function = (v: any): boolean => {\n    return isObject(v) ? 'handler' in v : false;\n};\n\nconst getKey: Function = (v: deferKeyItem): string => {\n    return isCommitObj(v) ? (<IcommitObj>v).handler : <string>v;\n};\n\nconst getArgs: Function = (v: deferKeyItem): any[] => {\n    return isCommitObj(v) ? (<IcommitObj>v).args : [];\n};\n\nconst hasRequest: Function = (key: deferKey, request: IRequest): boolean => {\n    if (isArray(key)) {\n        return (\n            (<(string | IcommitObj)[]>key).filter(\n                (v: string | IcommitObj): boolean =>\n                    !!getFunctionInRequest(getKey(v), request),\n            ).length === (<(string | IcommitObj)[]>key).length\n        );\n    } else {\n        return !!getFunctionInRequest(<string>key, request);\n    }\n};\n\nconst getAll: Function = (\n    key: (string | IcommitObj)[],\n    request: IRequest,\n    args: any[],\n): Function[] => {\n    return key.map(\n        (v: string | IcommitObj): Function =>\n            getFunctionInRequest(getKey(v), request)(...getArgs(v), ...args),\n    );\n};\n\n/**\n * default class Chain\n */\nexport default class Chain {\n    private request: IRequest;\n    private actionFun: IAction;\n    private deferItem: Promise<any> | null;\n    private waitList: (Idefer | Ithen)[];\n    private resultList: any[];\n    private resolve: Function;\n    private reject: Function;\n\n    constructor(request: IRequest, action: IAction) {\n        this.request = request;\n        this.resultList = [];\n        this.waitList = [];\n        this.actionFun = action;\n    }\n\n    public commit(key: deferKey, ...args: any[]): Chain {\n        if (!hasRequest(key, this.request)) {\n            throw new Error(`can not find matched ${key} function`);\n        }\n\n        if (this.deferItem) {\n            this.waitList.push({\n                key,\n                args,\n            });\n        } else {\n            let defer: Promise<any>;\n            if (isArray(key)) {\n                defer = Promise.all(getAll(key, this.request, [...args]));\n            } else {\n                defer = getFunctionInRequest(<string>key, this.request)(\n                    ...args,\n                );\n            }\n            if (!isPromise(defer)) {\n                throw new Error(\n                    `The ${key} function not return a Promise function`,\n                );\n            }\n            // call entry one\n            this.deferItem = defer;\n            this.deferItem.then(\n                (result: any) => {\n                    this.commitChain(result);\n                },\n                (error: any) => {\n                    let reject!: Function;\n                    if (this.waitList.length && !isIdefer(this.waitList[0])) {\n                        reject = (<Ithen>this.waitList[0]).reject;\n                    } else {\n                        reject = this.reject;\n                    }\n                    if (reject) {\n                        this.deferItem = null;\n                        reject(error);\n                    }\n                },\n            );\n        }\n\n        return this;\n    }\n\n    public then(resolve: Function, reject: Function): Chain {\n        if (this.deferItem) {\n            this.waitList.push({\n                resolve,\n                reject,\n            });\n        } else {\n            this.innerResolve({ resolve, reject });\n        }\n\n        return this;\n    }\n\n    public finish(resolve: Function, reject: Function): Chain {\n        this.resolve = resolve;\n        this.reject = reject;\n\n        return this;\n    }\n\n    // tslint:disable no-reserved-keywords\n    public catch(reject: Function): Chain {\n        this.reject = reject;\n\n        return this;\n    }\n    // tslint:enable no-reserved-keywords\n\n    public action(key: string, ...args: any[]): Chain {\n        return this.actionFun[key].call(null, this, ...args);\n    }\n\n    private commitChain(result: any): void {\n        this.resultList.push(result);\n        if (this.waitList.length) {\n            const keyObj: Idefer | Ithen = this.waitList.shift();\n            this.deferItem = null;\n            // if ('key' in keyObj) {\n            if (isIdefer(keyObj)) {\n                // object Idefer\n                this.commit(keyObj.key, ...keyObj.args, result);\n            } else {\n                // object Ithen\n                this.innerResolve(keyObj, result);\n            }\n        } else {\n            if (this.resolve) {\n                this.resolve(this.resultList);\n            }\n        }\n    }\n\n    private innerResolve(then: Ithen, result?: any): Chain {\n        // call entry two\n        const deferItem: any = then.resolve(result);\n        if (isPromise(deferItem)) {\n            // object Promise\n            deferItem.then(\n                (data: any) => {\n                    this.commitChain(data);\n                },\n                (error: any) => {\n                    if (this.reject) {\n                        this.reject(error);\n                    }\n                },\n            );\n        } else if (isArray(deferItem)) {\n            // 暂时可以认为一定是 commitAll 包装\n            const item: IcommitObj[] = deferItem.map((v: IcommitWrap) => {\n                return {\n                    handler: v.key,\n                    args: v.args,\n                };\n            });\n            this.commit(item);\n        } else if (deferItem !== undefined && deferItem[commitToken]) {\n            // another commit\n            this.commit(deferItem.key, ...deferItem.args);\n        } else {\n            this.commitChain(deferItem);\n        }\n\n        return this;\n    }\n}\n","/*\n * @description request.ts\n */\n\nimport { commitToken } from 'Lib/conf';\nimport logger from 'Lib/logger';\nimport Chain from 'Request/chain';\n\n// tslint:disable no-any no-unsafe-any\n\nexport interface IRequest {\n    [key: string]: Function | IRequest;\n}\n\ninterface IModule {\n    [key: string]: IRequestConfig;\n}\n\nexport interface IAction {\n    [key: string]: Function;\n}\n\ninterface IConfig {\n    promiseWrap?: boolean;\n    [key: string]: boolean;\n}\n\nexport interface IcommitWrap {\n    key: string;\n    args: any[];\n}\n\nexport interface IRequestConfig {\n    request: IRequest;\n    modules?: IModule;\n    config?: IConfig;\n    action?: IAction;\n}\n\ninterface IoutputRequest {\n    request: IRequest;\n}\n\ninterface IrequestConfig {\n    config: IConfig;\n    modules?: {\n        [key: string]: IConfig;\n    };\n}\n\nconst defaultConfig: IConfig = {\n    promiseWrap: false,\n};\n\n// export interface IcommitWrap {\n//     [commitToken]: boolean;\n//     key: string;\n//     args: any[];\n// }\n\n// tslint:disable promise-function-async\nconst formatFunctionToPromise: Function = (\n    flag: boolean,\n    fn: Function,\n): Function => {\n    if (flag) {\n        return (...args: any[]): Promise<any> => {\n            return new Promise(\n                (resolve: Function, reject: Function): any => {\n                    fn.call(null, resolve, reject, ...args);\n                },\n            );\n        };\n    } else {\n        return fn;\n    }\n};\n// tslint:enable promise-function-async\n\n/**\n * class Request\n */\nexport default class Request {\n    public request: IRequest;\n\n    private requestConfig: IRequestConfig;\n    private setting: IrequestConfig;\n    private action: IAction;\n\n    constructor(request: IRequestConfig) {\n        this.requestConfig = request;\n\n        this.setting = this.getRequestConfig();\n        this.action = this.requestConfig.action;\n        this.requestFormat();\n    }\n\n    public chain(): Chain {\n        return new Chain(this.request, this.action);\n    }\n\n    public commitWrap(key: string, ...args: any[]): object {\n        return {\n            [commitToken]: true,\n            key,\n            args: [...args],\n        };\n    }\n\n    public commitAll(commitWrap: IcommitWrap[]): object[] {\n        return commitWrap.map(\n            (v: IcommitWrap): object => {\n                return {\n                    [commitToken]: true,\n                    key: v.key,\n                    args: [...v.args],\n                };\n            },\n        );\n    }\n\n    private requestFormat(): void {\n        const outputRequest: IRequest = {};\n        const requestKes: string[] = Object.keys.call(\n            null,\n            this.requestConfig.request || {},\n        );\n        const modulesKeys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.modules || {},\n        );\n\n        for (const i of requestKes) {\n            outputRequest[i] = formatFunctionToPromise(\n                this.setting.config.promiseWrap,\n                this.requestConfig.request[i],\n            );\n        }\n\n        for (const i of modulesKeys) {\n            const tmpRequest: IRequest = {};\n            const tmpKeys: string[] = Object.keys.call(\n                null,\n                this.requestConfig.modules[i].request || {},\n            );\n            for (const j of tmpKeys) {\n                tmpRequest[j] = formatFunctionToPromise(\n                    this.setting.modules[i].promiseWrap,\n                    <Function>this.requestConfig.modules[i].request[j],\n                );\n            }\n            outputRequest[i] = tmpRequest;\n        }\n\n        this.request = outputRequest;\n    }\n\n    private getRequestConfig(): IrequestConfig {\n        const tmpConfig: IrequestConfig = {\n            config: defaultConfig,\n            modules: {},\n        };\n        const keys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.config || {},\n        );\n        const modulesKeys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.modules || {},\n        );\n\n        keys.map(\n            (v: string): void => {\n                tmpConfig.config[v] = this.requestConfig.config[v];\n            },\n        );\n\n        for (const i of modulesKeys) {\n            tmpConfig.modules[i] = { ...tmpConfig.config };\n            const tmpKeys: string[] = Object.keys.call(\n                null,\n                this.requestConfig.modules[i].config || {},\n            );\n            for (const j of tmpKeys) {\n                tmpConfig.modules[i][j] = this.requestConfig.modules[i].config[\n                    j\n                ];\n            }\n        }\n\n        return tmpConfig;\n    }\n}\n"],"names":["commitToken","key","Symbol","isArray","obj","Object","prototype","toString","call","isObject","isPromise","then","e","getFunctionInRequest","request","iRequest","indexOf","keys","split","map","v","Function","undefined","isCommitObj","getKey","handler","getArgs","args","hasRequest","filter","length","getAll","action","resultList","waitList","actionFun","Error","deferItem","push","defer","Promise","all","result","commitChain","error","reject","isIdefer","resolve","innerResolve","keyObj","shift","commit","data","item","defaultConfig","formatFunctionToPromise","flag","fn","requestConfig","setting","getRequestConfig","requestFormat","Chain","commitWrap","outputRequest","requestKes","modulesKeys","modules","i","config","promiseWrap","tmpRequest","tmpKeys","j","tmpConfig"],"mappings":"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"}