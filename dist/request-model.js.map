{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap deafb4cd56e3e36967fd","webpack:///./src/lib/conf.ts","webpack:///./src/request/chain.ts","webpack:///./src/lib/help.ts","webpack:///./src/index.js","webpack:///./src/request/request.ts","webpack:///./src/request/data.ts","webpack:///./src/request/collection.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","commitToken","key","Symbol","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_2_Request_data__","isIdefer","v","undefined","isCommitObj","__WEBPACK_IMPORTED_MODULE_1_Lib_help__","getKey","handler","hasRequest","request","keys","filter","length","map","join","getAll","args","getArgs","noop","[object Object]","action","resultList","waitList","actionFun","unResolveRejection","keyStr","Error","deferItem","push","defer","Promise","all","then","result","commitChain","error","innerRejection","resolve","reject","always","before","innerResolve","finish","alwaysFn","keyObj","shift","commit","innerAlways","e","data","item","__WEBPACK_IMPORTED_MODULE_0_Lib_conf__","fn","beforeFn","index","splice","obj","toString","input","exec","__WEBPACK_IMPORTED_MODULE_0_Request_request_ts__","__WEBPACK_IMPORTED_MODULE_2_Request_collection__","defaultConfig","promiseWrap","formatFunctionToPromise","flag","requestConfig","setting","getRequestConfig","actionCollection","requestFormat","__WEBPACK_IMPORTED_MODULE_1_Request_chain__","chain","apply","catch","finally","commitWrap","outputRequest","requestKes","modulesKeys","config","loopRequest","mKeys","pModule","resultRequest","tmpRequest","tmpKeys","j","subModules","tmpConfig","loopModules","modulesKey","pModules","assign","iRequest","indexOf","split","super","__WEBPACK_IMPORTED_MODULE_0_Lib_help__"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,iBAAAD,IAEAD,EAAA,iBAAAC,IARA,CASC,oBAAAK,UAAAC,KAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAR,QAGA,IAAAC,EAAAK,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAV,YAUA,OANAW,EAAAH,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAS,GAAA,EAGAT,EAAAD,QAqCA,OAhCAO,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,IAAAgB,EAAAhB,KAAAwB,WACA,WAA2B,OAAAxB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAM,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,OAAAR,OAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,IAGAvB,IAAAwB,EAAA,kCCzDO,MAAMC,EAA+B,MACxC,MAAMC,EAAc,kCACpB,OAAIC,OACOA,OAAOD,GAEPA,GAL6B,GAOvCE,EAAA,EAAAH,kDCXLI,EAAA7B,EAAA,GA8BA,SAAA8B,EAAkBC,GACd,YAAiBC,IAAVD,EAAEL,IAEb,MAAMO,EAAyBF,KACpBnB,OAAAsB,EAAA,EAAAtB,CAASmB,IAAK,YAAaA,EAGhCI,EAAoBJ,GACfE,EAAYF,GAAkBA,EAAGK,QAAkBL,EAOxDM,EAAuB,CAACX,EAAeY,KACzC,GAAI1B,OAAAsB,EAAA,EAAAtB,CAAQc,GAAM,CACd,MAAMa,EAA0D,EAE7DC,OACET,IACInB,OAAAiB,EAAA,EAAAjB,CAAqBuB,EAAOJ,GAAIO,IAGzC,OAAOC,EAAKE,OACNF,EAAKG,IAAKX,GAAmBA,EAAEK,QAAUL,EAAEK,QAAUL,GAAIY,KAAK,KAC9D,GAEN,OAAO/B,OAAAiB,EAAA,EAAAjB,CAA6Bc,EAAKY,GAAW,GAAaZ,GAInEkB,EAAmB,CACrBlB,EACAY,EACAO,IAEOnB,EAAIgB,IACNX,GACGnB,OAAAiB,EAAA,EAAAjB,CAAqBuB,EAAOJ,GAAIO,EAAhC1B,IA5Bc,CAACmB,GAChBE,EAAYF,GAAkBA,EAAGc,QA2BYC,CAAQf,MAAOc,IAKjEE,EAAiB,OAoRtBnB,EAAA,QApQGoB,YAAYV,EAAmBW,GAC3BnD,KAAKwC,QAAUA,EACfxC,KAAKoD,cACLpD,KAAKqD,YACLrD,KAAKsD,UAAYH,EAGdD,OAAOtB,KAAkBmB,GAC5B,GAAI/C,KAAKuD,mBACL,OAAOvD,KAEX,MAAMwD,EAAiBjB,EAAWX,EAAK5B,KAAKwC,SAC5C,GAAIgB,EACA,MAAM,IAAIC,0CAA0CD,KAGxD,GAAIxD,KAAK0D,UACL1D,KAAKqD,SAASM,MACV/B,MACAmB,aAED,CACH,IAAIa,EAQJ,GANIA,EADA9C,OAAAsB,EAAA,EAAAtB,CAAQc,GACAiC,QAAQC,IAAIhB,EAAOlB,EAAK5B,KAAKwC,YAAaO,KAE1CjC,OAAAiB,EAAA,EAAAjB,CAA6Bc,EAAK5B,KAAKwC,QAAvC1B,IACDiC,IAGNjC,OAAAsB,EAAA,EAAAtB,CAAU8C,GACX,MAAM,IAAIH,aACC7B,4CAIf5B,KAAK0D,UAAYE,EACjB5D,KAAK0D,UAAUK,KACVC,IACGhE,KAAKiE,YAAYD,IAEpBE,IACGlE,KAAKmE,eAAeD,KAKhC,OAAOlE,KAGJkD,KACHkB,EACAC,EACAC,EACAC,GAaA,OAXIvE,KAAK0D,UACL1D,KAAKqD,SAASM,MACVS,UACAC,SACAC,SACAC,WAGJvE,KAAKwE,cAAeJ,UAASC,SAAQC,SAAQC,WAG1CvE,KAGJkD,OACHkB,EACAC,EACAC,GASA,OAPKtE,KAAKqD,SAASV,QAAW3C,KAAK0D,WAG/B1D,KAAKoE,QAAUA,EACfpE,KAAKqE,OAASA,GAAkBrE,KAAKqE,QAHrCrE,KAAKwE,cAAeJ,UAASC,SAAQC,WAMlCtE,KAIJkD,QACHkB,EACAC,EACAC,GAEA,OAAOtE,KAAKyE,OAAOL,EAASC,EAAQC,GAIjCpB,MAAMmB,GAOT,OANKrE,KAAKqD,SAASV,QAAW3C,KAAK0D,UAG/B1D,KAAKqE,OAASA,EAFdrE,KAAKwE,cAAeJ,QAASnB,EAAMoB,WAKhCrE,KAGJkD,OAAOoB,GAGV,OAFAtE,KAAK0E,SAAWJ,EAETtE,KAGJkD,OAAOtB,KAAgBmB,GAC1B,OAAO/C,KAAKsD,UAAU1B,GAAKrB,KAAK,KAAMP,QAAS+C,GAG3CG,YAAYc,GAEhB,GADAhE,KAAKoD,WAAWO,KAAKK,GACjBhE,KAAKqD,SAASV,OAAQ,CACtB,MAAMgC,EAAyB3E,KAAKqD,SAASuB,QAC7C5E,KAAK0D,UAAY,KACb1B,EAAS2C,GAET3E,KAAK6E,OAAOF,EAAO/C,OAAQ+C,EAAO5B,KAAMiB,GAGxChE,KAAKwE,aAAaG,EAAQX,QAG1BhE,KAAKoE,SACLpE,KAAKoE,QAAQpE,KAAKoD,YAGtBpD,KAAK8E,cAIL5B,aAAaa,EAAaC,GAE9B,IAAIN,EACJ,GAAI1D,KAAKuD,mBAoBL,OAnBIQ,EAAKM,QACDN,EAAKQ,QACLR,EAAKQ,SAETR,EAAKM,OAAOrE,KAAKuD,oBACbQ,EAAKO,QACLP,EAAKO,SAETtE,KAAKuD,mBAAqB,MAE1BvD,KAAKmE,eACDnE,KAAKuD,mBACLQ,EAAKO,OACLP,EAAKQ,UAGTvE,KAAKuD,mBAAqB,MAGvBvD,KAEP,IACQ+D,EAAKQ,QACLR,EAAKQ,SAETb,EAAYK,EAAKK,QAAQJ,GACrBD,EAAKO,QACLP,EAAKO,SAEX,MAAOS,GAKL,OAJK/E,KAAKmE,eAAeY,EAAGhB,EAAKO,UAC7BtE,KAAKuD,mBAAqBwB,GAGvB/E,KAGf,GAAIc,OAAAsB,EAAA,EAAAtB,CAAU4C,GAEV1D,KAAK0D,UAAYA,EACjBA,EAAUK,KACLiB,IACGhF,KAAKiE,YAAYe,IAEpBd,IACGlE,KAAKmE,eAAeD,EAAOR,EAAUY,eAG1C,GAAIxD,OAAAsB,EAAA,EAAAtB,CAAQ4C,GAAY,CAE3B,MAAMuB,EAAqBvB,EAAUd,IAAKX,KAElCK,QAASL,EAAEL,IACXmB,KAAMd,EAAEc,QAGhB/C,KAAK6E,OAAOI,aACS/C,IAAdwB,GAA2BA,EAAUwB,EAAA,GAE5ClF,KAAK6E,OAAOnB,EAAU9B,OAAQ8B,EAAUX,MAExC/C,KAAKiE,YAAYP,GAGrB,OAAO1D,KAIHkD,eACJgB,EACAiB,EACAC,GAEA,IAAIf,EACAC,EAAmBa,EACnBZ,EAAmBa,EAEvB,GAAIpF,KAAKqD,SAASV,OAAQ,CACtB,IAAI0C,EAAgB,EACpB,IAAK,IAAIjF,EAAY,EAAGA,EAAIJ,KAAKqD,SAASV,OAAQvC,GAAQ,EACtD,IACK4B,EAAShC,KAAKqD,SAASjD,KAChBJ,KAAKqD,SAASjD,GAAIiE,OAC5B,CACEA,EAAiBrE,KAAKqD,SAASjD,GAAIiE,OACnCC,EAAiBtE,KAAKqD,SAASjD,GAAIkE,OACnCC,EAAiBvE,KAAKqD,SAASjD,GAAImE,OACnCc,EAAQjF,EACR,MAGRJ,KAAKqD,SAASiC,OAAO,EAAGD,GAK5B,OAHKhB,GAAUrE,KAAKqE,SAChBA,EAASrE,KAAKqE,QAEdA,GACArE,KAAK0D,UAAY,KACba,GACAA,IAEJF,EAAOH,GACHI,GACAA,IAEJtE,KAAK8E,eAEE,IAEP9E,KAAK8E,eAEE,GAIP5B,cACAlD,KAAK0E,UACL1E,KAAK0E,2CCnVf5C,EAAA,EAF+B,CAACyD,GACiB,mBAAxCzE,OAAOS,UAAUiE,SAASjF,KAAKgF,IAKxCzD,EAAA,EAFgC,CAACyD,GACgB,oBAAxCzE,OAAOS,UAAUiE,SAASjF,KAAKgF,IAIxCzD,EAAA,EAFkC,CAACyD,GACc,sBAAxCzE,OAAOS,UAAUiE,SAASjF,KAAKgF,IASxCzD,EAAA,EANiC,CAACyD,IAChC,IACI,MAA2B,mBAAbA,EAAIxB,KACpB,MAAOgB,GACL,OAAO,KAUbjD,EAAA,EANuC,CAAC2D,IACtC,MAAMzB,EAA0B,6BAA6B0B,KACzDD,EAAMD,YAGV,OAAOxB,EAASA,EAAO,GAAK,+FC5BhClC,EAAA,QAAe6D,EAAf,kDCFAC,EAAA1F,EAAA,GA+DA,MAAM2F,GACFC,aAAa,GAUXC,EAAoC,CACtCC,EACAb,IAEIa,EACO,IAAIjD,IACA,IAAIc,QACP,CAACO,EAAmBC,KAChBc,EAAG5E,KAAK,KAAM6D,EAASC,KAAWtB,KAKvCoC,EAoOdrD,EAAA,QArNGoB,YAAYV,GACRxC,KAAKiG,cAAgBzD,EAErBxC,KAAKkG,QAAUlG,KAAKmG,mBACpBnG,KAAKoG,iBAAmBpG,KAAKiG,cAAc9C,OAC3CnD,KAAKqG,gBAGFnD,mBAAmBiC,GACtB,OAAOY,GAAwB,EAAMZ,GAGlCjC,QACH,OAAO,IAAIoD,EAAA,EAAMtG,KAAKwC,QAASxC,KAAKoG,kBAGjClD,aACH,OAAO,IAAI0C,EAAA,EAIR1C,OAGAA,UAAUH,GACb,MAAMwD,EAAevG,KAAKuG,QAE1B,OAAOA,EAAM1B,OAAO2B,MAAMD,EAAOxD,GAG9BG,UAAUH,GACb,MAAMwD,EAAevG,KAAKuG,QAE1B,OAAOA,EAAMpD,OAAOqD,MAAMD,EAAOxD,GAG9BG,QAAQH,GACX,MAAMwD,EAAevG,KAAKuG,QAE1B,OAAOA,EAAMxC,KAAKyC,MAAMD,EAAOxD,GAG5BG,UAAUH,GACb,MAAMwD,EAAevG,KAAKuG,QAE1B,OAAOA,EAAM9B,OAAO+B,MAAMD,EAAOxD,GAI9BG,SAASH,GACZ,MAAMwD,EAAevG,KAAKuG,QAE1B,OAAOA,EAAME,MAAMD,MAAMD,EAAOxD,GAG7BG,UAAUH,GACb,MAAMwD,EAAevG,KAAKuG,QAE1B,OAAOA,EAAMjC,OAAOkC,MAAMD,EAAOxD,GAI9BG,WAAWH,GACd,MAAMwD,EAAevG,KAAKuG,QAE1B,OAAOA,EAAMG,QAAQF,MAAMD,EAAOxD,GAI/BG,WAAWtB,KAAgBmB,GAC9B,OACIG,CAACgC,EAAA,IAAc,EACftD,MACAmB,SAAUA,IAIXG,UAAUyD,GACb,OAAOA,EAAW/D,IACbX,KAEOiB,CAACgC,EAAA,IAAc,EACftD,IAAKK,EAAEL,IACPmB,SAAUd,EAAEc,SAMpBG,gBACJ,MAAM0D,GACFpE,WACAlC,YAEEuG,EAAuB/F,OAAO2B,KAAKlC,KACrC,KACAP,KAAKiG,cAAczD,aAEjBsE,EAAwBhG,OAAO2B,KAAKlC,KACtC,KACAP,KAAKiG,cAAc3F,aAGvB,IAAK,MAAMF,KAAKyG,EACZD,EAAcpE,QAAQpC,GAAK2F,EACvB/F,KAAKkG,QAAQa,OAAOjB,YACpB9F,KAAKiG,cAAczD,QAAQpC,IAInC,MAAM4G,EAAwB,CAC1BC,EACAf,EACAgB,EACAC,KAEA,IAAK,MAAM/G,KAAK6G,EAAO,CACnB,MAAMG,GACF5E,WACAlC,YAEE+G,EAAoBvG,OAAO2B,KAAKlC,KAClC,KACA2G,EAAQ9G,GAAGoC,aAEf,IAAK,MAAM8E,KAAKD,EACZD,EAAW5E,QAAQ8E,GAAKvB,EACpBG,EAAQ5F,QAAQF,GAAG2G,OAAOjB,YAChBoB,EAAQ9G,GAAGoC,QAAQ8E,IAGrCH,EAAc7G,QAAQF,GAAKgH,EAE3B,MAAMG,EAAuBzG,OAAO2B,KAAKlC,KACrC,KACA2G,EAAQ9G,GAAGE,aAEXiH,EAAW5E,QACXqE,EACIO,EACArB,EAAQ5F,QAAQF,GAChB8G,EAAQ9G,GAAGE,QACX6G,EAAc7G,QAAQF,MAKtC4G,EACIF,EACA9G,KAAKkG,QACLlG,KAAKiG,cAAc3F,QACnBsG,GAGJ5G,KAAKwC,QAAUoE,EAGX1D,mBACJ,MAAMsE,GACFT,OAAQlB,EACRvF,YAEEmC,EAAiB3B,OAAO2B,KAAKlC,KAC/B,KACAP,KAAKiG,cAAcc,YAEjBD,EAAwBhG,OAAO2B,KAAKlC,KACtC,KACAP,KAAKiG,cAAc3F,aAGvBmC,EAAKG,IACAX,IACGuF,EAAUT,OAAO9E,GAAKjC,KAAKiG,cAAcc,OAAO9E,KAIxD,MAAMwF,EAAwB,CAC1BC,EACApH,EACAqH,KAEA,IAAK,MAAMvH,KAAKsH,EAAY,CACxBC,EAASrH,QAAQF,IACb2G,OAAMjG,OAAA8G,UAAOD,EAASZ,QACtBzG,YAEJ,MAAM+G,EAAoBvG,OAAO2B,KAAKlC,KAClC,KACAD,EAAQF,GAAG2G,YAEf,IAAK,MAAMO,KAAKD,EACZM,EAASrH,QAAQF,GAAG2G,OAAOO,GAAKhH,EAAQF,GAAG2G,OAAOO,GAItD,MAAMC,EAAuBzG,OAAO2B,KAAKlC,KACrC,KACAD,EAAQF,GAAGE,aAEXiH,EAAW5E,QACX8E,EACIF,EACAjH,EAAQF,GAAGE,QACXqH,EAASrH,QAAQF,MAOjC,OAFAqH,EAAYX,EAAa9G,KAAKiG,cAAc3F,QAASkH,GAE9CA,kCC1Rb1F,EAAA,EAxB4C,EAC1CF,EACAY,KAEA,IACIwB,EADA6D,EAAqBrF,EAEzB,IACI,IAA0B,IAAtBZ,EAAIkG,QAAQ,KAAa,CACzB,MAAMrF,EAAiBb,EAAImG,MAAM,KACjCtF,EAAKG,IACD,CAACX,EAAW7B,KACJA,IAAMqC,EAAKE,OAAS,EACpBkF,EAAWA,EAASvH,QAAQ2B,GAE5B+B,EAAS6D,EAASrF,QAAQP,UAKtC+B,EAAS6D,EAASrF,QAAQZ,GAEhC,MAAOmD,IAET,OAAOf,6CC9BXsC,EAAApG,EAAA,GA2BC4B,EAAA,gBApBuCwE,EAAA,EACpCpD,cACI8E,OAAQxF,WAAalC,gBAGlB4C,IAAIiC,EAAcvD,GAErB,IAAKd,OAAAmH,EAAA,EAAAnH,CAAWqE,GACZ,MAAM,IAAI1B,MAAM,iCAGpB,IAAK3C,OAAAmH,EAAA,EAAAnH,CAAgBqE,KAAQvD,EACzB,MAAM,IAAI6B,MAAM,wCAGpB,MAAM9C,EAAeiB,GAAOd,OAAAmH,EAAA,EAAAnH,CAAgBqE,GAG5C,OAFAnF,KAAKwC,QAAQA,QAAQ7B,GAAQwE,EAEtBnF","file":"request-model.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"request-model\"] = factory();\n\telse\n\t\troot[\"request-model\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap deafb4cd56e3e36967fd","/**\n * @desciption conf\n */\n\nexport const commitToken: symbol | string = ((): symbol | string => {\n    const key: string = '__REQUEST__MODEL__COMMIT__TOKEN';\n    if (Symbol) {\n        return Symbol(key);\n    } else {\n        return key;\n    }\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/conf.ts","/**\n * @description chain\n */\nimport { commitToken } from 'Lib/conf';\nimport { isArray, isObject, isPromise } from 'Lib/help';\nimport { getFunctionInRequest } from 'Request/data';\nimport { IAction, IcommitWrap, IRequest } from 'Request/request';\n\n// tslint:disable no-any no-unsafe-any\n\ninterface Idefer {\n    key: deferKey;\n    args: any[];\n}\n\ntype deferKey = string | string[] | IcommitObj[];\ntype deferKeyItem = string | IcommitObj;\n\ninterface Ithen {\n    resolve: Function;\n    reject: Function;\n    always?: Function;\n    before?: Function;\n}\n\ninterface IcommitObj {\n    handler: string;\n    args: any[];\n}\n\nfunction isIdefer(v: any): v is Idefer {\n    return v.key !== undefined;\n}\nconst isCommitObj: Function = (v: any): boolean => {\n    return isObject(v) ? 'handler' in v : false;\n};\n\nconst getKey: Function = (v: deferKeyItem): string => {\n    return isCommitObj(v) ? (<IcommitObj>v).handler : <string>v;\n};\n\nconst getArgs: Function = (v: deferKeyItem): any[] => {\n    return isCommitObj(v) ? (<IcommitObj>v).args : [];\n};\n\nconst hasRequest: Function = (key: deferKey, request: IRequest): string => {\n    if (isArray(key)) {\n        const keys: (string | IcommitObj)[] = (<(string | IcommitObj)[]>(\n            key\n        )).filter(\n            (v: string | IcommitObj): boolean =>\n                !getFunctionInRequest(getKey(v), request),\n        );\n\n        return keys.length\n            ? keys.map((v: IcommitObj) => (v.handler ? v.handler : v)).join(',')\n            : '';\n    } else {\n        return getFunctionInRequest(<string>key, request) ? '' : <string>key;\n    }\n};\n\nconst getAll: Function = (\n    key: (string | IcommitObj)[],\n    request: IRequest,\n    args: any[],\n): Function[] => {\n    return key.map(\n        (v: string | IcommitObj): Function =>\n            getFunctionInRequest(getKey(v), request)(...getArgs(v), ...args),\n    );\n};\n\n// tslint:disable-next-line no-empty\nconst noop: Function = (): void => {};\n\n/**\n * default class Chain\n */\nexport default class Chain {\n    protected request: IRequest;\n    private actionFun: IAction;\n    private deferItem: Promise<any> | null;\n    private waitList: (Idefer | Ithen)[];\n    private resultList: any[];\n    private resolve: Function;\n    private reject: Function;\n    private alwaysFn: Function;\n    private unResolveRejection: any;\n\n    constructor(request: IRequest, action: IAction) {\n        this.request = request;\n        this.resultList = [];\n        this.waitList = [];\n        this.actionFun = action;\n    }\n\n    public commit(key: deferKey, ...args: any[]): Chain {\n        if (this.unResolveRejection) {\n            return this;\n        }\n        const keyStr: string = hasRequest(key, this.request);\n        if (keyStr) {\n            throw new Error(`can not find matched commit key: ${keyStr}`);\n        }\n\n        if (this.deferItem) {\n            this.waitList.push({\n                key,\n                args,\n            });\n        } else {\n            let defer: Promise<any>;\n            if (isArray(key)) {\n                defer = Promise.all(getAll(key, this.request, [...args]));\n            } else {\n                defer = getFunctionInRequest(<string>key, this.request)(\n                    ...args,\n                );\n            }\n            if (!isPromise(defer)) {\n                throw new Error(\n                    `The ${key} function not return a Promise function`,\n                );\n            }\n            // call entry one\n            this.deferItem = defer;\n            this.deferItem.then(\n                (result: any) => {\n                    this.commitChain(result);\n                },\n                (error: any) => {\n                    this.innerRejection(error);\n                },\n            );\n        }\n\n        return this;\n    }\n\n    public then(\n        resolve: Function,\n        reject?: Function,\n        always?: Function,\n        before?: Function,\n    ): Chain {\n        if (this.deferItem) {\n            this.waitList.push({\n                resolve,\n                reject,\n                always,\n                before,\n            });\n        } else {\n            this.innerResolve({ resolve, reject, always, before });\n        }\n\n        return this;\n    }\n\n    public finish(\n        resolve: Function,\n        reject?: Function,\n        always?: Function,\n    ): Chain {\n        if (!this.waitList.length && !this.deferItem) {\n            this.innerResolve({ resolve, reject, always });\n        } else {\n            this.resolve = resolve;\n            this.reject = reject ? reject : this.reject;\n        }\n\n        return this;\n    }\n\n    // tslint:disable-next-line no-reserved-keywords\n    public finally(\n        resolve: Function,\n        reject?: Function,\n        always?: Function,\n    ): Chain {\n        return this.finish(resolve, reject, always);\n    }\n\n    // tslint:disable-next-line no-reserved-keywords\n    public catch(reject: Function): Chain {\n        if (!this.waitList.length && !this.deferItem) {\n            this.innerResolve({ resolve: noop, reject });\n        } else {\n            this.reject = reject;\n        }\n\n        return this;\n    }\n\n    public always(always: Function): Chain {\n        this.alwaysFn = always;\n\n        return this;\n    }\n\n    public action(key: string, ...args: any[]): Chain {\n        return this.actionFun[key].call(null, this, ...args);\n    }\n\n    private commitChain(result: any): void {\n        this.resultList.push(result);\n        if (this.waitList.length) {\n            const keyObj: Idefer | Ithen = this.waitList.shift();\n            this.deferItem = null;\n            if (isIdefer(keyObj)) {\n                // object Idefer\n                this.commit(keyObj.key, ...keyObj.args, result);\n            } else {\n                // object Ithen\n                this.innerResolve(keyObj, result);\n            }\n        } else {\n            if (this.resolve) {\n                this.resolve(this.resultList);\n            }\n\n            this.innerAlways();\n        }\n    }\n\n    private innerResolve(then: Ithen, result?: any): Chain {\n        // call entry two\n        let deferItem: any;\n        if (this.unResolveRejection) {\n            if (then.reject) {\n                if (then.before) {\n                    then.before();\n                }\n                then.reject(this.unResolveRejection);\n                if (then.always) {\n                    then.always();\n                }\n                this.unResolveRejection = null;\n            } else if (\n                this.innerRejection(\n                    this.unResolveRejection,\n                    then.always,\n                    then.before,\n                )\n            ) {\n                this.unResolveRejection = null;\n            }\n\n            return this;\n        } else {\n            try {\n                if (then.before) {\n                    then.before();\n                }\n                deferItem = then.resolve(result);\n                if (then.always) {\n                    then.always();\n                }\n            } catch (e) {\n                if (!this.innerRejection(e, then.always)) {\n                    this.unResolveRejection = e;\n                }\n\n                return this;\n            }\n        }\n        if (isPromise(deferItem)) {\n            // object Promise\n            this.deferItem = deferItem;\n            deferItem.then(\n                (data: any) => {\n                    this.commitChain(data);\n                },\n                (error: any) => {\n                    this.innerRejection(error, deferItem.always);\n                },\n            );\n        } else if (isArray(deferItem)) {\n            // 暂时可以认为一定是 commitAll 包装\n            const item: IcommitObj[] = deferItem.map((v: IcommitWrap) => {\n                return {\n                    handler: v.key,\n                    args: v.args,\n                };\n            });\n            this.commit(item);\n        } else if (deferItem !== undefined && deferItem[commitToken]) {\n            // another commit\n            this.commit(deferItem.key, ...deferItem.args);\n        } else {\n            this.commitChain(deferItem);\n        }\n\n        return this;\n    }\n\n    // fn may be the always fn\n    private innerRejection(\n        error: any,\n        fn?: Function,\n        beforeFn?: Function,\n    ): boolean {\n        let reject!: Function;\n        let always: Function = fn;\n        let before: Function = beforeFn;\n        // if (this.waitList.length && !isIdefer(this.waitList[0])) {\n        if (this.waitList.length) {\n            let index: number = 0;\n            for (let i: number = 0; i < this.waitList.length; i = i + 1) {\n                if (\n                    !isIdefer(this.waitList[i]) &&\n                    (<Ithen>this.waitList[i]).reject\n                ) {\n                    reject = (<Ithen>this.waitList[i]).reject;\n                    always = (<Ithen>this.waitList[i]).always;\n                    before = (<Ithen>this.waitList[i]).before;\n                    index = i;\n                    break;\n                }\n            }\n            this.waitList.splice(0, index);\n        }\n        if (!reject && this.reject) {\n            reject = this.reject;\n        }\n        if (reject) {\n            this.deferItem = null;\n            if (before) {\n                before();\n            }\n            reject(error);\n            if (always) {\n                always();\n            }\n            this.innerAlways();\n\n            return true;\n        } else {\n            this.innerAlways();\n\n            return false;\n        }\n    }\n\n    private innerAlways(): void {\n        if (this.alwaysFn) {\n            this.alwaysFn();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/request/chain.ts","/**\n * @description help\n */\n\n// tslint:disable no-any no-unsafe-any\n\nexport const isArray: Function = (obj: any): boolean => {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexport const isObject: Function = (obj: any): boolean => {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n};\nexport const isFunction: Function = (obj: any): obj is Function => {\n    return Object.prototype.toString.call(obj) === '[object Function]';\n};\n\nexport const isPromise: Function = (obj: any): boolean => {\n    try {\n        return typeof obj.then === 'function';\n    } catch (e) {\n        return false;\n    }\n};\n\nexport const getFunctionName: Function = (input: Function): string => {\n    const result: RegExpExecArray = /^function\\s+([\\w\\$]+)\\s*\\(/.exec(\n        input.toString(),\n    );\n\n    return result ? result[1] : '';\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/help.ts","import Request from 'Request/request.ts';\n\nexport default Request;\n// module.exports = Request;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/*\n * @description request.ts\n */\n\nimport { commitToken } from 'Lib/conf';\nimport logger from 'Lib/logger';\nimport Chain from 'Request/chain';\nimport Collection from 'Request/collection';\n\n// tslint:disable no-any no-unsafe-any\n\n// export interface IRequest {\n//     [key: string]: Function | IRequest;\n// }\nexport interface IRequest {\n    request: {\n        [key: string]: Function;\n    };\n    modules: {\n        [key: string]: IRequest;\n    };\n}\n\nexport interface Irequest {\n    [key: string]: Function;\n}\n\ninterface IModule {\n    [key: string]: IRequestConfig;\n}\n\nexport interface IAction {\n    [key: string]: Function;\n}\n\ninterface IConfig {\n    promiseWrap?: boolean;\n    [key: string]: boolean;\n}\n\nexport interface IcommitWrap {\n    key: string;\n    args: any[];\n}\n\nexport interface IRequestConfig {\n    request: Irequest;\n    modules?: IModule;\n    config?: IConfig;\n    action?: IAction;\n}\n\ninterface IoutputRequest {\n    request: IRequest;\n}\n\ninterface IrequestConfig {\n    config: IConfig;\n    modules: {\n        [key: string]: IrequestConfig;\n    };\n}\n\nconst defaultConfig: IConfig = {\n    promiseWrap: false,\n};\n\n// export interface IcommitWrap {\n//     [commitToken]: boolean;\n//     key: string;\n//     args: any[];\n// }\n\n// tslint:disable promise-function-async\nconst formatFunctionToPromise: Function = (\n    flag: boolean,\n    fn: Function,\n): Function => {\n    if (flag) {\n        return (...args: any[]): Promise<any> => {\n            return new Promise(\n                (resolve: Function, reject: Function): any => {\n                    fn.call(null, resolve, reject, ...args);\n                },\n            );\n        };\n    } else {\n        return fn;\n    }\n};\n// tslint:enable promise-function-async\n\n/**\n * class Request\n */\nexport default class Request {\n    public request: IRequest;\n\n    private requestConfig: IRequestConfig;\n    private setting: IrequestConfig;\n    private actionCollection: IAction;\n\n    constructor(request: IRequestConfig) {\n        this.requestConfig = request;\n\n        this.setting = this.getRequestConfig();\n        this.actionCollection = this.requestConfig.action;\n        this.requestFormat();\n    }\n\n    public static PROMISEWRAP(fn: Function): Function {\n        return formatFunctionToPromise(true, fn);\n    }\n\n    public chain(): Chain {\n        return new Chain(this.request, this.actionCollection);\n    }\n\n    public collection(): Collection {\n        return new Collection();\n    }\n\n    // add request\n    public add(): void {}\n\n    // wrap-start: wrap method to avoid use chain\n    public commit(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.commit.apply(chain, args);\n    }\n\n    public action(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.action.apply(chain, args);\n    }\n\n    public then(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.then.apply(chain, args);\n    }\n\n    public finish(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.finish.apply(chain, args);\n    }\n\n    // tslint:disable-next-line no-reserved-keywords\n    public catch(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.catch.apply(chain, args);\n    }\n\n    public always(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.always.apply(chain, args);\n    }\n\n    // tslint:disable-next-line no-reserved-keywords\n    public finally(...args: any[]): Chain {\n        const chain: Chain = this.chain();\n\n        return chain.finally.apply(chain, args);\n    }\n    // wrap end\n\n    public commitWrap(key: string, ...args: any[]): object {\n        return {\n            [commitToken]: true,\n            key,\n            args: [...args],\n        };\n    }\n\n    public commitAll(commitWrap: IcommitWrap[]): object[] {\n        return commitWrap.map(\n            (v: IcommitWrap): object => {\n                return {\n                    [commitToken]: true,\n                    key: v.key,\n                    args: [...v.args],\n                };\n            },\n        );\n    }\n\n    private requestFormat(): void {\n        const outputRequest: IRequest = {\n            request: {},\n            modules: {},\n        };\n        const requestKes: string[] = Object.keys.call(\n            null,\n            this.requestConfig.request || {},\n        );\n        const modulesKeys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.modules || {},\n        );\n\n        for (const i of requestKes) {\n            outputRequest.request[i] = formatFunctionToPromise(\n                this.setting.config.promiseWrap,\n                this.requestConfig.request[i],\n            );\n        }\n\n        const loopRequest: Function = (\n            mKeys: string[],\n            setting: IrequestConfig,\n            pModule: IModule,\n            resultRequest: IRequest,\n        ): void => {\n            for (const i of mKeys) {\n                const tmpRequest: IRequest = {\n                    request: {},\n                    modules: {},\n                };\n                const tmpKeys: string[] = Object.keys.call(\n                    null,\n                    pModule[i].request || {},\n                );\n                for (const j of tmpKeys) {\n                    tmpRequest.request[j] = formatFunctionToPromise(\n                        setting.modules[i].config.promiseWrap,\n                        <Function>pModule[i].request[j],\n                    );\n                }\n                resultRequest.modules[i] = tmpRequest;\n\n                const subModules: string[] = Object.keys.call(\n                    null,\n                    pModule[i].modules || {},\n                );\n                if (subModules.length) {\n                    loopRequest(\n                        subModules,\n                        setting.modules[i],\n                        pModule[i].modules,\n                        resultRequest.modules[i],\n                    );\n                }\n            }\n        };\n        loopRequest(\n            modulesKeys,\n            this.setting,\n            this.requestConfig.modules,\n            outputRequest,\n        );\n\n        this.request = outputRequest;\n    }\n\n    private getRequestConfig(): IrequestConfig {\n        const tmpConfig: IrequestConfig = {\n            config: defaultConfig,\n            modules: {},\n        };\n        const keys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.config || {},\n        );\n        const modulesKeys: string[] = Object.keys.call(\n            null,\n            this.requestConfig.modules || {},\n        );\n\n        keys.map(\n            (v: string): void => {\n                tmpConfig.config[v] = this.requestConfig.config[v];\n            },\n        );\n\n        const loopModules: Function = (\n            modulesKey: string[],\n            modules: IModule,\n            pModules: IrequestConfig,\n        ): void => {\n            for (const i of modulesKey) {\n                pModules.modules[i] = {\n                    config: { ...pModules.config },\n                    modules: {},\n                };\n                const tmpKeys: string[] = Object.keys.call(\n                    null,\n                    modules[i].config || {},\n                );\n                for (const j of tmpKeys) {\n                    pModules.modules[i].config[j] = modules[i].config[j];\n                }\n\n                // 如果还有子module 循环\n                const subModules: string[] = Object.keys.call(\n                    null,\n                    modules[i].modules || {},\n                );\n                if (subModules.length) {\n                    loopModules(\n                        subModules,\n                        modules[i].modules,\n                        pModules.modules[i],\n                    );\n                }\n            }\n        };\n        loopModules(modulesKeys, this.requestConfig.modules, tmpConfig);\n\n        return tmpConfig;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/request/request.ts","/**\n * @description help to find data in Request\n */\nimport { IRequest } from 'Request/request';\n\ntype Iresult = Function | undefined;\n\nexport const getFunctionInRequest: Function = (\n    key: string,\n    request: IRequest,\n): Iresult => {\n    let iRequest: IRequest = request;\n    let result: Function;\n    try {\n        if (key.indexOf('/') !== -1) {\n            const keys: string[] = key.split('/');\n            keys.map(\n                (v: string, i: number): void => {\n                    if (i !== keys.length - 1) {\n                        iRequest = iRequest.modules[v];\n                    } else {\n                        result = iRequest.request[v];\n                    }\n                },\n            );\n        } else {\n            result = iRequest.request[key];\n        }\n    } catch (e) {}\n\n    return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/request/data.ts","/**\n * @desc collection class\n */\n\nimport { getFunctionName, isFunction } from 'Lib/help';\nimport Chain from 'Request/chain';\n\nexport default class Collection extends Chain {\n    constructor() {\n        super({ request: {}, modules: {} }, {});\n    }\n\n    public add(fn: Function, key?: string): Collection {\n        // may use for js\n        if (!isFunction(fn)) {\n            throw new Error('The input must be a Function.');\n        }\n\n        if (!getFunctionName(fn) && !key) {\n            throw new Error('The input function must have a name.');\n        }\n\n        const name: string = key || getFunctionName(fn);\n        this.request.request[name] = fn;\n\n        return this;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/request/collection.ts"],"sourceRoot":""}